---
- hosts: default
  become_user: root
  become_method: sudo
  become: yes

  vars:
    project_dir: '/var/www/pedasi'
    venv_dir: '{{ project_dir }}/env'
    ansible_python_interpreter: /usr/bin/python3

  tasks:
    - name: Test connection
      ping:

    - name: Update apt
      apt:
        update_cache: yes
        upgrade: yes

    - name: Install apt prerequisites
      apt: name={{ item }} state=latest
      with_items:
        - nginx
        - python3
        - python3-dev
        - python3-pip
        - python3-venv
        - git
        - mysql-server
        - libmysqlclient-dev
        # Required for Ansible to setup DB
        - python3-mysqldb

    - name: Setup dev deployment
      block:
      - name: Clone / update from local repo
        git:
          repo: '/vagrant'
          dest: '{{ project_dir }}'

      - name: Copy dev settings
        copy:
          src: 'deploy/.env.dev'
          dest: '{{ project_dir }}/.env'
          owner: www-data
          group: www-data
          mode: 0600

      when: production is not defined

    - name: Setup production deployment
      block:
      - name: Copy deploy key
        copy:
          src: 'deploy/.deployment-key'
          dest: '~/.deployment-key'
          mode: 0600

      - name: Clone / update master branch
        git:
          repo: 'ssh://git@github.com/Southampton-RSG/PEDASI-IoT.git'
          dest: '{{ project_dir }}'
          accept_hostkey: yes
          key_file: '~/.deployment-key'
          version: master

      - name: Copy production settings
        copy:
          src: 'deploy/.env.prod'
          dest: '{{ project_dir }}/.env'
          owner: www-data
          group: www-data
          mode: 0600

      when: production is defined

    - name: Set permissions on manage.py
      file:
        path: '{{ project_dir }}/manage.py'
        mode: 0755

    - name: Create virtualenv
      command: python3 -m venv '{{ venv_dir }}' creates='{{ venv_dir }}'

    - name: Install pip requirements
      pip:
        requirements: '{{ project_dir}}/requirements.txt'
        virtualenv: '{{ venv_dir }}'

    - name: Restart and enable MariaDB
      systemd:
        name: mysql
        state: restarted
        enabled: yes
        daemon-reload: yes

    - name: Create portal_tng database
      mysql_db:
        name: 'pedasi'
        state: present

    - name: Create DB user
      mysql_user:
        name: 'pedasi'
        # TODO generate a real password
        password: 'pedasi'
        state: present
        priv: 'pedasi.*:ALL'

    - name: Set permissions on project directory
      file:
        path: '{{ project_dir }}'
        mode: 0775

    - name: Compile documentation
      make:
        chdir: '{{ project_dir }}/docs'
        target: '{{ item }}'
        params:
          SPHINXBUILD: '{{ venv_dir }}/bin/sphinx-build'
          SPHINXAPIDOC: '{{ venv_dir }}/bin/sphinx-apidoc'
      loop:
      - clean
      - apidoc
      - html

    - name: Create static directory
      file:
        path: '{{ project_dir }}/static'
        state: directory
        owner: www-data
        group: www-data
        mode: 0775

    - name: Perform Django setup
      django_manage: command={{ item }} app_path={{ project_dir }} virtualenv={{ venv_dir }}
      with_items:
        - migrate
        - collectstatic

    - name: Install uWSGI
      pip:
        name: uwsgi
        state: latest

    - name: Setup uWSGI config
      file:
        path: /etc/uwsgi/sites
        state: directory
        mode: 0755

    - name: Copy web config files
      synchronize: src={{ item.src }} dest={{ item.dest }}
      with_items:
        - { src: deploy/uwsgi/sites/pedasi.ini, dest: /etc/uwsgi/sites/pedasi.ini }
        - { src: deploy/systemd/system/uwsgi.service, dest: /etc/systemd/system/uwsgi.service }

    - name: Copy web config files
      synchronize:
        src: deploy/nginx/sites-available/pedasi
        dest: /etc/nginx/sites-available/pedasi

    - name: Activate Nginx site
      file:
        src: /etc/nginx/sites-available/pedasi
        dest: /etc/nginx/sites-enabled/pedasi
        state: link

    - name: Restart services
      systemd: name={{ item }} state=restarted
      with_items:
        - nginx
        - uwsgi

    - name: Open firewall
      ufw:
        rule: allow
        name: 'Nginx Full'
