---
- name: Install apt prerequisites
  apt:
    name: '{{ packages }}'
    state: latest
    update_cache: yes
  vars:
    packages:
      - nginx
      - python3
      - python3-dev
      - python3-pip
      - python-virtualenv
      - git
      - libmysqlclient-dev
      - goaccess
      - apache2-utils

- name: Clone / update from local repo
  git:
    repo: '/vagrant'
    dest: '{{ project_dir }}'
  when: vagrant_dir.stat.exists == True

- name: Clone / update branch from main repo
  git:
    repo: 'https://github.com/PEDASI/PEDASI.git'
    dest: '{{ project_dir }}'
    accept_hostkey: yes
    version: '{{ branch | default("dev") }}'
  when: vagrant_dir.stat.exists == False

- name: Copy settings template
  template:
    src: '{{ env_file | default("env.j2") }}'
    dest: '{{ project_dir }}/.env'
    owner: www-data
    group: www-data
    mode: 0600

- name: Set permissions on manage.py
  file:
    path: '{{ project_dir }}/manage.py'
    mode: 0755

- name: Install pip requirements
  pip:
    requirements: '{{ project_dir}}/requirements.txt'
    virtualenv: '{{ venv_dir }}'
    virtualenv_python: python3

- name: Set permissions on project directory
  file:
    path: '{{ project_dir }}'
    mode: 0775

- name: Create static directory
  file:
    path: '{{ project_dir }}/static'
    state: directory
    owner: www-data
    group: www-data
    mode: 0775

- name: Run Django migrations
  django_manage:
    command: migrate
    app_path: "{{ project_dir }}"
    virtualenv: "{{ venv_dir }}"

- name: Install uWSGI
  pip:
    name: uwsgi
    state: latest

- name: Setup uWSGI config
  file:
    path: /etc/uwsgi/sites
    state: directory
    mode: 0755

- name: Copy web config files
  copy:
    src: pedasi.ini
    dest: /etc/uwsgi/sites/pedasi.ini
  notify:
    - restart uwsgi

- name: Setup uWSGI service
  copy:
    src: uwsgi.service
    dest: /etc/systemd/system/uwsgi.service
  notify:
    - restart uwsgi

- name: Deactivate default Nginx site
  file:
    path: /etc/nginx/sites-enabled/default
    state: absent
  notify:
    - restart nginx

- name: Prepare for SSL certificate generation using LetsEncrypt  # TODO: Automate certificate generation
  block:
    - name: Add Certbot repo
      apt_repository:
        repo: ppa:certbot/certbot

    - name: Install apt prerequisites
      apt:
        name: python-certbot-nginx
        state: latest
        update_cache: yes
  when: deploy_mode == 1

- name: Generate self-signed SSL certificate
  block:
    - name: Create directories
      file:
        path: "{{ item }}"
        state: directory
      with_items:
        - /etc/ssl
        - /etc/ssl/crt
        - /etc/ssl/private
        - /etc/ssl/csr

    - name: Create keys
      openssl_privatekey:
        path: /etc/ssl/private/{{ inventory_hostname }}.pem
        owner: www-data
        group: www-data

    - name: Create Certificate Signing Request (CSR)
      openssl_csr:
        path: /etc/ssl/csr/{{ inventory_hostname }}.csr
        privatekey_path: /etc/ssl/private/{{ inventory_hostname }}.pem
        common_name: "{{ inventory_hostname }}"
        owner: www-data
        group: www-data

    - name: Generate certificate
      openssl_certificate:
        path: /etc/ssl/crt/{{ inventory_hostname }}.crt
        privatekey_path: /etc/ssl/private/{{ inventory_hostname }}.pem
        csr_path: /etc/ssl/csr/{{ inventory_hostname }}.csr
        provider: selfsigned
        owner: www-data
        group: www-data

    - name: Copy Nginx site
      template:
        src: pedasi-ssl.j2
        dest: /etc/nginx/sites-available/pedasi-ssl
      notify:
        - restart nginx

    - name: Activate Nginx site
      file:
        src: /etc/nginx/sites-available/pedasi-ssl
        dest: /etc/nginx/sites-enabled/pedasi-ssl
        state: link
      notify:
        - restart nginx
  when: deploy_mode > 1

- name: Copy Nginx site
  template:
    src: pedasi.j2
    dest: /etc/nginx/sites-available/pedasi
    # WARNING: this will not update an existing file
    force: no
  notify:
    - restart nginx

- name: Activate Nginx site
  file:
    src: /etc/nginx/sites-available/pedasi
    dest: /etc/nginx/sites-enabled/pedasi
    state: link
  notify:
    - restart nginx

- name: Set permissions on report.html
  file:
    path: "{{ project_dir }}/report.html"
    state: touch
    owner: www-data
    group: www-data

# Interferes with wildcard server_name in dev deployment
- name: Remove default Nginx server config
  file:
    path: /etc/nginx/sites-enabled/default
    state: absent
  notify:
    - restart nginx

- name: Open firewall
  ufw:
    rule: allow
    name: "Nginx Full"
    state: enabled

- name: Setup Goaccess Cron job
  cron:
    name: "Generate Goaccess report"
    user: www-data
    state: present
    minute: "*/10"
    job: "{{ project_dir }}/scripts/goaccess.sh {{ project_dir }}/report.html"

- name: Setup external API access counters reset Cron job
  cron:
    name: "Reset external API access counters"
    user: www-data
    state: present
    hour: 0
    minute: 0
    job: "{{ venv_dir }}/bin/python {{ project_dir }}/manage.py reset_api_count"

- name: Compile documentation
  make:
    chdir: '{{ project_dir }}/docs'
    target: '{{ item }}'
    params:
      SPHINXBUILD: '{{ venv_dir }}/bin/sphinx-build'
      SPHINXAPIDOC: '{{ venv_dir }}/bin/sphinx-apidoc'
  loop:
  - clean
  - html

- name: Django collect static files
  django_manage:
    command: collectstatic
    app_path: "{{ project_dir }}"
    virtualenv: "{{ venv_dir }}"
